#!/bin/sh
#
# GOOGLEGARGLE: Given a unique docid as an argument, do your worst.

ARIA=$(which aria2c)
ARIAOPTIONS="--max-overall-download-limit=90M --file-allocation=none --min-split-size=1M --log-level=notice --remote-time=true --max-file-not-found=1"
DLSCRIPT=$(which youtube-dl)

__exists () {
      which $1 >/dev/null 2>&1;
}

LIST=list
while getopts :f: OPT; do
    case $OPT in
	f|+f)
	    LIST="$OPTARG"
	    ;;
	*)
	    echo "usage: `basename $0` [+-f ARG} [--] ARGS..."
	    exit 2
    esac
done
shift `expr $OPTIND - 1`
OPTIND=1

if [ ! -f $ARIA ] && [ ! -f $(which aria2c) ]; then exit 1; fi
# =================================================
# Ideally, nothing down here needs screwing with.

# Take me down to sanity check city where the grass is green and girls are pretty

if [ ! -f "$ARIA" ]
   then
   echo "The script is looking for ${ARIA:-aria2c} but it is not there. Fix in the script."
   exit 1
fi

if [ ! -f "$DLSCRIPT" ]
   then
   echo "The script is looking for ${DLSCRIPT:-youtube-dl} but it is not there. Fix in the script."
   exit 1
fi

HOMEBASE=$(pwd)
__exists wget && getCommand="wget" && getArgs="-O"
__exists fetch && getCommand="fetch" && getArgs="-o"

require() {
  $* || exit $?
}

grab() {
  require $getCommand $getArgs $*
}

aria() {
  require $ARIA $ARIAOPTIONS -o $*
}

grab_by_id() {
  id=$1
  
  cd $HOMEBASE
  
  # Account for how people shove things at the script.
  
  EQUALS=$(echo $id | grep =)
  
  if [ $EQUALS ]
     then
     id=$(echo $id | cut -f2 -d"=")
  fi
  
  cd $HOMEBASE
  
  SEPDIB=$(echo "$id" | sed 's/-//g' | cut -c1)
  SECDIB=$(echo "$id" | sed 's/-//g' | cut -c2)
  THIRDIB=$(echo "$id" | sed 's/-//g' | cut -c3)
  
  echo "$SEPDIB - $SECDIB - $THIRDIB"
  
  if [ ! -d $SEPDIB ]
     then
     echo "First ID for $SEPDIB! Creating."
     mkdir $SEPDIB
     cd $SEPDIB
     else
     cd $SEPDIB
  fi
  
  if [ ! -d $SECDIB ]
     then
     echo "First ID for $SEPDIB/$SECDIB! Creating."
     mkdir $SECDIB
     cd $SECDIB
     else
     cd $SECDIB
  fi
  
  if [ ! -d $THIRDIB ]
     then
     echo "First ID for $SEPDIB/$SECDIB/$THIRDIB! Creating."
     mkdir $THIRDIB
     cd $THIRDIB
     else
     cd $THIRDIB
  fi
  
  if [ -f "$id/$id.flv" -a ! -f "$id/$id.flv.aria2" ]
  then
    echo "There is already a $id downloaded. Hooray."
  else
    [ -d "$id" ] && echo "Resuming $id." || mkdir -- "$id"
    cd -- "$id"
    retry_time=2
    while true; do
      (grab "$id.html" "http://video.google.com/videoplay?docid=$id"
       grep -- "video-title>" "$id.html" | cut -f2 -d">" | cut -f1 -d"<"
       aria $id.flv "$($DLSCRIPT -g http://video.google.com/videoplay?docid=$id)"
       grab "$id.xml" "http://video.google.com/videotranscript?docid=$id&type=list"
       cat -- "$id.xml" | tr ">" "\n" | grep "$<track " | while read line; do
         echo $line
         tid=`echo $line | sed -n -e 's/.*id="\([^"]*\)".*/\1/p'`
         name=`echo $line | sed -n -e 's/.*name="\([^"]*\)".*/\1/p'`
         lang=`echo $line | sed -n -e 's/.*lang_code="\([^"]*\)".*/\1/p'`
         lang_name=`echo $line | sed -n -e 's/.*lang_translated="\([^"]*\)".*/\1/p'`
         echo "Found $lang_name subtitle track $tid named $name"
         grab "$id.$tid.xml" "http://video.google.com/videotranscript?docid=$id&type=track&name=$name&lang=$lang"
       done) && break
      if [ $retry_time -gt 32 ]; then
        echo "Too many errors on $id, giving up on this one."
        echo "$id" >> $HOMEBASE/failed.list
        break
      fi
      echo "Error while downloading. Will retry in $retry_time seconds."
      sleep $retry_time
      retry_time=$(( $retry_time * 2 ))
    done
  fi
}

if [ -n "$1" ];then 
  for id in "$@"; do grab_by_id "$id"; done
else
  if [ ! -f "$LIST" ] && [ ! -p "$LIST" ]
    then
    echo "Please get a file called $LIST and put it in the same directory as this script."
    exit 1
  fi
  while read id; do grab_by_id "$id"; done < "$LIST"
fi



