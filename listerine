#!/bin/bash
#
#./listerine - a companion to the google gargle project
#relies on googlegrape, aria2c, curl, and youtube-dl

#SERVER=199.48.254.90:8081
SERVER=listerine.ninjawedding.org:8081
GARGLE=./googlegargle

while getopts :ul: OPT; do
    case $OPT in
	u)
	    USERNAME="$OPTARG"
	    ;;
	l)
            LISTFILE="$OPTARG"
            ;;
	*)
	    echo "usage: `basename $0` [-u USERNAME] [-l LISTFILE]"
            exit 1;
    esac
done

if [ -z "$LISTFILE" ]; then
    LISTFILE=_list
fi

if [ ! -f "$LISTFILE" ]; then
    touch "$LISTFILE"
fi

warning() {
  echo "$0: $*" >&2
}

error() {
  echo "$0: $*" >&2
  exit 2
}

if [ -f _username ]; then
    read USERNAME < _username
fi

if [ -z $USERNAME ]; then
  error "You must supply a username with the -u option before you can begin"
fi

if [ ! -f $GARGLE ]; then
    error "Couldn't find googlegargle. Are you sure you cloned everything from the git repository?"
    exit 2
fi

case "$(uname)" in
  Linux|CYGWIN*)
    get_file_hash() {
      sha1sum "$1" |awk '{print $1}'
    }
    get_file_size() {
      stat -c %s "$1"
    }
    ;;
  Darwin|*BSD)
    get_file_hash() {
      openssl sha1 "$1" |awk '{print $2}'
    }
    get_file_size() {
      stat -f %z "$1"
    }
    ;;
  *)
    error "Sorry, I don't know how to do file sizes and checksums on your system, please try to fix me."
    ;;
esac


EXTERN_IP=`curl --silent ipv4.icanhazip.com` #Do not change without good reason, or underscor will eat your brains
RAN=0 #how many processes ran so far

askserver() {
    var="$1"
    cmd="$2"
    shift 2
    rest=
    for chunk in "$@"; do
        rest="$rest/$chunk"
    done
    curl_output=`curl --silent --fail "http://$SERVER/$cmd/${USERNAME}$rest"`
    if [ $? != 0 ]; then
        warning "Couldn't contact the listerine server. The listerine server could be down, or your network."
    fi
    case "$var" in
        -) echo -- "$curl_output";;
        *) export $var="$curl_output";;
    esac
}

askserver - introduce $EXTERN_IP

mkdir -p _logs
QUEUE_DIR=_queue
mkdir -p $QUEUE_DIR
RUNNING=0
MAX=1
while [ $MAX -gt 0 -o $RUNNING -gt 0 ]; do
    if [ -f ./_max_concurrent ]; then
        read MAX < ./_max_concurrent
    else
        MAX=1
    fi
    RUNNING=0
    for PID in $(jobs -p); do
        if kill -0 "$PID" 2>/dev/null; then
            let "RUNNING = $RUNNING + 1"
        fi
    done
    echo -n "There are $RUNNING running jobs (limit $MAX). PIDs:"
    for PID in $(ls $QUEUE_DIR/); do
        echo -n " $PID"
    done
    if [ $MAX -eq 0 ]; then
        echo -n ". Limit is 0, will exit when these jobs end"
    fi
    echo
    while [ $RUNNING -lt $MAX ]; do
  echo "Getting an id from $SERVER, authenticated as $USERNAME with IP $EXTERN_IP"
  askserver id getID
  if [ $? != 0 ]; then
    warning "The server didn't give us an id. This could mean the server is broken, or possibly that we're finished."
    warning "Getting an id from the static list."
    read id || { warning "We ran out of ids, waiting for current downloads to finish."; wait; error "WE RAN OUT OF IDs!!!"; }
  fi
  if [ $(echo $id | grep "^[-0-9]*$") != $id ]; then
    error "The server did not return a valid id. It said: $id"
  fi

  echo ID is $id

  $GARGLE -- "$id" 1>>_logs/"$id".log 2>&1 &
        echo $id > $QUEUE_DIR/$!
        echo "googlegargle started for $id with PID $!"
        let "RAN = $RAN + 1"
        let "RUNNING = $RUNNING + 1"
    done
    for PID in $(ls $QUEUE_DIR/); do
        read id < $QUEUE_DIR/"$PID"
        if kill -0 "$PID" 2>/dev/null; then
            echo -n "googlegargle status for $id: 	"
            tail -n1 _logs/"$id".log
            continue
        fi
        if [ -f "$SEPDIB/$SECDIB/$THIRDIB/$id/$id.flv.aria2" ]; then
            warning "Failed to download anything for $id; old PID=$PID"
            mkdir -p _queue_errors/
            FAKEPID=$PID;
            while [ -e _queue_errors/"$FAKEPID" ] ; do
		let "FAKEPID = $FAKEPID + 1"
            done
            mv $QUEUE_DIR/"$PID" _queue_errors/"$FAKEPID"
            continue
	fi
  SEPDIB=$(echo "$id" | sed 's/-//g' | cut -c1)
  SECDIB=$(echo "$id" | sed 's/-//g' | cut -c2)
  THIRDIB=$(echo "$id" | sed 's/-//g' | cut -c3)
  file="$SEPDIB/$SECDIB/$THIRDIB/$id/$id.flv"
  if [ -f $file -a ! -f "$file.aria2" ]; then
    hash=$(get_file_hash "$file")
    size=$(get_file_size "$file")
    echo "Hash is $hash"
    echo "ID is $id"
    echo "USERNAME is $USERNAME"
    echo "Size is $size"
    askserver - finishVid $id $size $hash && rm -f $QUEUE_DIR/$PID
  else
    warning "Failed to download anything for $id; old PID=$PID"
    mkdir -p _queue_errors/
    FAKEPID=$PID;
    while [ -e _queue_errors/"$FAKEPID" ] ; do
      let "FAKEPID = $FAKEPID + 1"
    done
    mv $QUEUE_DIR/"$PID" _queue_errors/"$FAKEPID"
    continue
  fi
    done

  if [ -f STOP ]; then 
    echo "$0: I see a file called STOP. Stopping."
    exit 0
  fi
  echo .
  sleep 5
done < $LISTFILE
echo "Ran a total of $RAN downloads."
